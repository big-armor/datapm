import { Redshift } from "aws-sdk";
import { expect } from "chai";
import Knex from "knex";
import { getAllRegions, getRedshiftClusterConfiguration } from "../../src/util/AwsUtil";
import {
	createTestPackage,
	getPromptInputs,
	removePackageFiles,
	testCmd,
	TestResults,
	KEYS,
	TEST_SOURCE_FILES
} from "../integration/test-utils";

const redshiftSinkPrompts = ["Region?", "S3 Bucket?", "Redshift Cluster?", "Schema?"];

const getRedshiftSinkPromptInputs = (inputs?: string[], skip = 0, count = 20) =>
	getPromptInputs(redshiftSinkPrompts, inputs, skip, count);

describe("Redshift Sink Test", function () {
	const clusterIdentifier = "datapm-test-cluster";
	const schemaName = "datapm_test";
	const tableName = "covid_02_01_2020";
	let knexClient: Knex;
	let packageAFilePath: string;
	let region: string;

	before(async function () {
		const redshiftClient = new Redshift({ region: "us-east-2" });
		const clusterConfiguration = await getRedshiftClusterConfiguration(redshiftClient, clusterIdentifier);
		const allRegions = await getAllRegions();
		const regionIndex = allRegions.findIndex((regionCode) => regionCode === "us-east-2");
		region = Array(regionIndex).fill(KEYS.DOWN).join("");

		knexClient = Knex({
			client: "pg",
			connection: {
				host: clusterConfiguration.host,
				port: clusterConfiguration.port,
				user: clusterConfiguration.username,
				password: clusterConfiguration.password,
				database: clusterConfiguration.database,
				ssl: true
			} as Knex.PgConnectionConfig
		});
		await knexClient.raw(`drop schema if exists ${schemaName} cascade`);

		packageAFilePath = await createTestPackage(TEST_SOURCE_FILES.FILE1, true);
	});

	after(async function () {
		removePackageFiles(["covid-02-01-2020"]);
		knexClient.destroy();
	});

	it("Should import data without error", async function () {
		const prompts = getRedshiftSinkPromptInputs([region, "", "", schemaName]);
		const results: TestResults = {
			messageFound: false
		};

		const cmdResult = await testCmd(
			"fetch",
			[packageAFilePath, "--sink", "redshift"],
			prompts,
			async (line: string, promptIndex: number) => {
				if (promptIndex === prompts.length && line.includes("Finished writing 67 records")) {
					results.messageFound = true;
				}
			}
		);

		expect(cmdResult.code, "Exit code").equals(0);
		expect(results.messageFound, "Found success message").equals(true);
	}).timeout(120000);

	it("Should find the record counts and data types in the database", async function () {
		// Get PG Connection Information
		try {
			const recordCount = await knexClient.withSchema(schemaName).table(tableName).count();
			expect(recordCount[0].count).equals("67");

			const columnCount = await knexClient
				.table("information_schema.columns")
				.where({ table_schema: schemaName, table_name: tableName })
				.count();

			expect(columnCount[0].count).equals("6");

			const columns = await knexClient
				.table("information_schema.columns")
				.where({ table_schema: schemaName, table_name: tableName })
				// eslint-disable-next-line camelcase
				.select<[{ column_name: string; data_type: string }]>(["column_name", "data_type"]);

			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "province/state" && column.data_type === "character varying"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "country/region" && column.data_type === "character varying"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) =>
						column.column_name === "last update" && column.data_type === "timestamp without time zone"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(columns.find((column) => column.column_name === "confirmed" && column.data_type === "bigint")).to
				.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(columns.find((column) => column.column_name === "deaths" && column.data_type === "bigint")).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(columns.find((column) => column.column_name === "recovered" && column.data_type === "bigint")).to
				.exist;
		} finally {
			//
		}
	});

	it("Should find sink states in the database", async function () {
		// Get PG Connection Information
		try {
			const recordCount = await knexClient.withSchema(schemaName).table("_datapm_state").count();
			expect(recordCount[0].count).equals("1");

			const columnCount = await knexClient
				.table("information_schema.columns")
				.where({ table_schema: schemaName, table_name: "_datapm_state" })
				.count();

			expect(columnCount[0].count).equals("6");

			const columns = await knexClient
				.table("information_schema.columns")
				.where({ table_schema: schemaName, table_name: "_datapm_state" })
				// eslint-disable-next-line camelcase
				.select<[{ column_name: string; data_type: string }]>(["column_name", "data_type"]);

			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "catalog_slug" && column.data_type === "character varying"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "package_slug" && column.data_type === "character varying"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "package_major_version" && column.data_type === "integer"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "stream_sets" && column.data_type === "character varying"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "package_version" && column.data_type === "character varying"
				)
			).to.exist;
			// eslint-disable-next-line no-unused-expressions
			expect(
				columns.find(
					(column) => column.column_name === "timestamp" && column.data_type === "timestamp without time zone"
				)
			).to.exist;

			const records = await knexClient.withSchema(schemaName).table("_datapm_state");
			const firstRecord = records[0];
			expect(firstRecord.catalog_slug).equals("_no_catalog");
			expect(firstRecord.package_slug).equals("covid-02-01-2020");
			expect(firstRecord.package_major_version).equals(1);
			expect(firstRecord.package_version).equals("1.0.0");
			const streamSets = JSON.parse(firstRecord.stream_sets);
			expect(streamSets).has.property("covid-02-01-2020");
			expect(streamSets["covid-02-01-2020"]).has.property("streamStates");
			expect(streamSets["covid-02-01-2020"].streamStates).has.property("covid-02-01-2020");
			expect(streamSets["covid-02-01-2020"].streamStates["covid-02-01-2020"]).has.property("schemaStates");
			expect(streamSets["covid-02-01-2020"].streamStates["covid-02-01-2020"].schemaStates).has.property(
				"covid-02-01-2020"
			);
			expect(
				streamSets["covid-02-01-2020"].streamStates["covid-02-01-2020"].schemaStates["covid-02-01-2020"]
			).has.property("lastOffset");
			expect(
				streamSets["covid-02-01-2020"].streamStates["covid-02-01-2020"].schemaStates["covid-02-01-2020"]
					.lastOffset
			).equals(66);
			expect(streamSets["covid-02-01-2020"].streamStates["covid-02-01-2020"].streamOffset).equals(66);
			expect(streamSets["covid-02-01-2020"].streamStates["covid-02-01-2020"]).has.property("updateHash");
		} finally {
			//
		}
	});

	it("Should import data again if force update flag set", async function () {
		const prompts = getRedshiftSinkPromptInputs([region, "", "", schemaName]);
		const results: TestResults = {
			messageFound: false
		};

		const cmdResult = await testCmd(
			"fetch",
			[packageAFilePath, "--sink", "redshift", "--force-update"],
			prompts,
			async (line: string, promptIndex: number) => {
				if (promptIndex === prompts.length && line.includes("Finished writing 67 records")) {
					results.messageFound = true;
				}
			}
		);

		expect(cmdResult.code, "Exit code").equals(0);
		expect(results.messageFound, "Found success message").equals(true);
	}).timeout(120000);

	it("Record count shouldn't be changed after force update", async function () {
		try {
			const recordCount = await knexClient.withSchema(schemaName).table(tableName).count();
			expect(recordCount[0].count).equals("67");
		} finally {
			//
		}
	});
});
