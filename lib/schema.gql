"""
ISO 8601 serialized Date strings
"""
scalar Date

"""
Generic object JSON serialized strings
"""
scalar JSON

"""
Package files are JSON serialized and validated using JSONSchema
"""
scalar PackageFileJSON

"""
A no-return value, mapped to void in typescript
"""
scalar Void

"""
ValidationString is used at runtime by the validate***Directive classes to allow apollo a intermediate type for conversions
"""
scalar ValidationString

"""
A string that uniquely identifies a catalog - this is an intermediate type only for internal validation
"""
scalar CatalogSlug

"""
A string that uniquely identifies a package - this is an intermediate type only for internal validation
"""
scalar PackageSlug

"""
A string that uniquely identifies a collection - this is an intermediate type only for internal validation
"""
scalar CollectionSlug

"""
A string that uniquely identifies an email address - this is an intermediate type only for internal validation
"""
scalar EmailAddress

"""
A string that is a user's password - this is an intermediate type only for internal validation
"""
scalar Password

"""
A string that uniquely identifies a Username - this is an intermediate type only for internal validation
"""
scalar Username

"""
A string of markdown content - this is an intermidiate type only for internal validation
"""
scalar markdown

"""
A string that uniquely identifies a Username or Email address - this is an intermediate type only for internal validation
"""
scalar UsernameOrEmailAddress

enum UserStatus {
    PENDING_SIGN_UP
    ACTIVE
    SUSPENDED
}

"""
Server status states
"""
enum RegistryStatus {
    SERVING_REQUESTS
}

"""
Potential responses when creating a new version on a package
"""
enum VersionConflict {
    VERSION_EXISTS
    HIGHER_VERSION_EXISTS
    HIGHER_VERSION_REQUIRED
}

"""
General permission values, which are applied to users for catalogs, package, and other access
"""
enum Permission {
    MANAGE
    VIEW
    EDIT
    NONE
}

"""
Scopes for an API Key
"""
enum Scope {
    MANAGE_API_KEYS
    READ_PRIVATE_ASSETS
    MANAGE_PRIVATE_ASSETS
}
"""
Activity Log Event types
"""
enum ActivityLogEventType {
    PACKAGE_CREATED
    PACKAGE_DELETED
    PACKAGE_VIEWED
    PACKAGE_FETCHED
    PACKAGE_PUBLIC_CHANGED
    PACKAGE_EDIT

    PACKAGE_ISSUE_CREATED
    PACKAGE_ISSUE_EDIT
    PACKAGE_ISSUE_COMMENT_CREATED
    PACKAGE_ISSUE_COMMENT_EDIT
    PACKAGE_ISSUE_COMMENT_DELETED
    PACKAGE_ISSUE_CLOSED
    PACKAGE_ISSUE_DELETED

    VERSION_CREATED
    VERSION_UPDATED
    VERSION_DELETED

    COLLECTION_CREATED
    COLLECTION_DELETED
    COLLECTION_VIEWED
    COLLECTION_EDIT
    COLLECTION_PACKAGE_ADDED
    COLLECTION_PACKAGE_REMOVED
    COLLECTION_PUBLIC_CHANGED

    CATALOG_CREATED
    CATALOG_DELETED
    CATALOG_PUBLIC_CHANGED
    CATALOG_EDIT

    USER_CREATED
    USER_DELETED
    USER_EDIT
    USER_STATUS_CHANGED
}

enum ActivityLogChangeType {
    VERSION_FIRST_VERSION
    VERSION_TRIVIAL_CHANGE
    VERSION_PATCH_CHANGE
    VERSION_MINOR_CHANGE
    VERSION_MAJOR_CHANGE

    PUBLIC_ENABLED
    PUBLIC_DISABLED

    COVER_IMAGE_UPDATED
    COVER_IMAGE_REMOVED
    AVATAR_IMAGE_UPDATED
    AVATAR_IMAGE_REMOVED
}

"""
The package issue status
"""
enum PackageIssueStatus {
    OPEN
    CLOSED
}

"""
Order by options
"""
enum OrderBy {
    CREATED_AT
    UPDATED_AT
}

"""
Package difference types
"""
enum PackageDifferenceType {
    REMOVE_SCHEMA
    REMOVE_HIDDEN_SCHEMA
    ADD_SCHEMA
    REMOVE_SOURCE
    CHANGE_PACKAGE_DISPLAY_NAME
    CHANGE_PACKAGE_DESCRIPTION
    CHANGE_SOURCE
    CHANGE_SOURCE_CONFIGURATION
    CHANGE_SOURCE_URIS
    CHANGE_STREAM_STATS
    CHANGE_STREAM_UPDATE_HASH
    ADD_PROPERTY
    HIDE_PROPERTY
    UNHIDE_PROPERTY
    REMOVE_PROPERTY
    REMOVE_HIDDEN_PROPERTY
    CHANGE_PROPERTY_TYPE
    CHANGE_PROPERTY_FORMAT
    CHANGE_PROPERTY_DESCRIPTION
    CHANGE_GENERATED_BY
    CHANGE_UPDATED_DATE
    CHANGE_VERSION
    CHANGE_README_MARKDOWN
    CHANGE_LICENSE_MARKDOWN
    CHANGE_README_FILE
    CHANGE_LICENSE_FILE
    CHANGE_WEBSITE
    CHANGE_CONTACT_EMAIL
    REMOVE_STREAM_SET
}

"""
Follow Type
"""
enum FollowType {
    CATALOG
    COLLECTION
    PACKAGE
    PACKAGE_ISSUE
    USER
}

"""
Notification frequency
"""
enum NotificationFrequency {
    INSTANT
    DAILY
    WEEKLY
    MONTHLY
    NEVER
}

"""
Notification Event type
"""
enum NotificationEventType {
    PACKAGE_PATCH_CHANGE
    PACKAGE_MINOR_CHANGE
    PACKAGE_MAJOR_CHANGE
    COLLECTION_PACKAGE_ADDED
    COLLECTION_PACKAGE_REMOVED
    CATALOG_PACKAGE_ADDED
    CATALOG_PACKAGE_REMOVED
    PACKAGE_ISSUE_COMMENT_ADDED
    PACKAGE_ISSUE_STAUS_CHANGE
}

"""
Whether the requesting user has the specified permission on the catalog
"""
directive @hasCatalogPermission(permission: Permission) on OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Whether the requesting user has the specified permission on the package
"""
directive @hasPackagePermission(permission: Permission) on OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Whether the requesting user has the specified permission on the collection
"""
directive @hasCollectionPermission(permission: Permission) on OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Whether the catalog slug provided is valid
"""
directive @validCatalogSlug on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
Whether the catalog slug provided is valid
"""
directive @validPackageSlug on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
Whether the collection slug provided is valid
"""
directive @validCollectionSlug(allowNull: Boolean) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
Whether the markdown provided is valid
"""
directive @validMarkdown(maxLength: Int) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"""
A collection of packages offered by a person or an organization.
"""
type Catalog {
    identifier: CatalogIdentifier!
    displayName: String
    description: String
    website: String
    creator: User
    isPublic: Boolean
    unclaimed: Boolean

    """
    The permissions of the requesting user to the catalog
    """
    myPermissions: [Permission!]
    packages: [Package]
}

"""
 Represents a single offering on the registry. Packages contain one or more versions of a Package File as it is updated over time. A package may contain one or more
data data sets, and is a member of one and only one catalog. A package may be included in zero or more collections.
"""
type Package {
    creator: User
    identifier: PackageIdentifier!
    catalog: Catalog
    displayName: String
    description: String
    latestVersion: Version
    versions: [Version]
    createdAt: Date
    updatedAt: Date
    isPublic: Boolean
    myPermissions: [Permission!]
    fetchedCount: Int
    viewedCount: Int
}

"""
A package issue represents an issue raised for a topic related to the package.
"""
type PackageIssue {
    issueNumber: Int!
    subject: String!
    content: String
    author: User
    packageIdentifier: BasePackageIdentifier
    status: PackageIssueStatus
    createdAt: Date
    updatedAt: Date
}

type PackageIssueComment {
    commentNumber: Int!
    content: String!
    author: User!
    createdAt: Date!
    updatedAt: Date
}

"""
 A collection is a curated list of one or more packages from across one or more catalogs on a given topic. Collections are created and maintained
by consumer side users, and generally not the publishers
"""
type Collection {
    creator: User
    identifier: CollectionIdentifier!
    name: String
    description: String
    packages: [Package!]
    createdAt: Date
    updatedAt: Date
    isPublic: Boolean
    isRecommended: Boolean
    myPermissions: [Permission!]
}

"""
The basic data used to display a collection
"""
type CollectionBasicData {
    identifier: CollectionIdentifier!
    name: String
    description: String
}

"""
The basic data used to display a collection
"""
type PackageCollectionsResult {
    collections: [Collection!]
    hasMore: Boolean!
    count: Int!
}

"""
My Follows result
"""
type MyFollowsResult {
    follows: [Follow!]
    hasMore: Boolean!
    count: Int!
}

"""
Represents a single package's listing in a collection, and information about how it was added
"""
type CollectionPackage {
    collection: Collection!
    package: Package!
    addedByUser: User
}

"""
Represents a user, and their permissions on a package
"""
type UserPackagePermissions {
    user: User
    permissions: [Permission!]!
}

"""
Represents users, and their permissions on a collection
"""
type UserCollectionPermissions {
    user: User!
    permissions: [Permission!]!
}

"""
Represents users, and their permissions on a catalog
"""
type UserCatalogPermissions {
    user: User!
    permissions: [Permission!]!
}

"""
A single version of a package file for a package listing on the registry
"""
type Version {
    identifier: VersionIdentifier!
    createdAt: Date
    updatedAt: Date
    package: Package
    author: User
    packageFile: PackageFileJSON
}

"""
The complete identifier for a version of a package on a registry
"""
type VersionIdentifier {
    registryURL: String
    catalogSlug: String!
    packageSlug: String!
    versionMajor: Int!
    versionMinor: Int!
    versionPatch: Int!
}

"""
The version values
"""
type VersionIdentifierValues {
    versionMajor: Int!
    versionMinor: Int!
    versionPatch: Int!
}

"""
The complete identifier for a package on a registry
"""
type PackageIdentifier {
    registryURL: String!
    catalogSlug: String!
    packageSlug: String!
}

"""
The complete identifier for a package on a registry
"""
type BasePackageIdentifier {
    catalogSlug: String!
    packageSlug: String!
}

"""
The complete identifier for a catalog on a registry
"""
type CatalogIdentifier {
    registryURL: String
    catalogSlug: String!
}

"""
The complete identifier for a collections on a registry
"""
type CollectionIdentifier {
    registryURL: String
    collectionSlug: String!
}

"""
Represents a logged user activity
"""
type ActivityLog {
    user: User
    targetPackage: Package
    targetPackageVersion: Version
    targetCollection: Collection
    targetCatalog: Catalog
    eventType: ActivityLogEventType!
    changeType: ActivityLogChangeType
    createdAt: Date!
    updatedAt: Date!
    propertiesEdited: [String!]
}

"""
The response for a catalog search request
"""
type SearchCatalogsResult {
    catalogs: [Catalog!]
    hasMore: Boolean!
    count: Int!
}

"""
" The response for a collection search request
"""
type SearchCollectionResult {
    collections: [Collection!]
    hasMore: Boolean!
    count: Int!
}

"""
The response for packages list request
"""
type PackagesResult {
    packages: [Package!]
    hasMore: Boolean!
    count: Int!
}

"""
The response for a catalog list request
"""
type CatalogsResult {
    catalogs: [Catalog!]
    hasMore: Boolean!
    count: Int!
}

"""
The response for collections list request
"""
type CollectionsResult {
    collections: [Collection!]
    hasMore: Boolean!
    count: Int!
}

"""
The response for a package search request
"""
type SearchPackagesResult {
    packages: [Package!]
    hasMore: Boolean!
    count: Int!
}

"""
The response for a package issues request
"""
type PackageIssuesResult {
    issues: [PackageIssue!]
    hasMore: Boolean!
    count: Int!
    openIssuesCount: Int!
    closedIssuesCount: Int!
}

"""
The response for a package issue comments request
"""
type PackageIssueCommentsResult {
    comments: [PackageIssueComment!]
    hasMore: Boolean!
    count: Int!
}

"""
The response for latest packages request
"""
type LatestPackagesResult {
    packages: [Package!]
    hasMore: Boolean!
    count: Int!
}

"""
The response for searching users
"""
type SearchUsersResult {
    users: [User]!
    hasMore: Boolean!
    count: Int!
}

"""
The response for a search term auto-complete request
"""
type AutoCompleteResult {
    catalogs: [Catalog!]
    packages: [Package!]
    collections: [Collection!]
    users: [User!]
}

"""
The response for a search term auto-complete request
"""
type ActivityLogResult {
    logs: [ActivityLog!]!
    hasMore: Boolean!
    count: Int!
}

"""
The package differences response
"""
type PackageDifferences {
    newVersion: VersionIdentifierValues
    oldVersion: VersionIdentifierValues
    differences: [PackageDifference]
}

"""
The package difference type
"""
type PackageDifference {
    type: PackageDifferenceType
    pointer: String
}

"""
The follow type
"""
type Follow {
    user: User
    notificationFrequency: NotificationFrequency!
    eventTypes: [NotificationEventType]!
    catalog: Catalog
    package: Package
    collection: Collection
    packageIssue: PackageIssue
}

"""
Platform settings type
"""
type PlatformSettings {
    key: String!
    serializedSettings: String!
    isPublic: Boolean!
}

"""
Platform template settings type
"""
type BuilderIOSettings {
    apiKey: String!
    templates: [BuilderIOTemplate!]
}

"""
Template type
"""
type BuilderIOTemplate {
    key: String!
    entry: String!
}

"""
The complete identifier for a version of a package, assuming the registry is based on the HTTP request URL
"""
input VersionIdentifierInput {
    catalogSlug: String! @validCatalogSlug
    packageSlug: String! @validPackageSlug
    versionMajor: Int!
    versionMinor: Int!
    versionPatch: Int!
}

"""
The complete identifier for a package, assuming the registry is based on the HTTP request URL
"""
input PackageIdentifierInput {
    catalogSlug: String! @validCatalogSlug
    packageSlug: String! @validPackageSlug
}

"""
The complete identifier for a package issue
"""
input PackageIssueIdentifierInput {
    issueNumber: Int!
}

"""
The complete identifier for a package issue
"""
input PackageIssueFullIdentifierInput {
    packageIdentifier: PackageIdentifierInput!
    issueNumber: Int!
}

"""
The package issue creation input
"""
input CreatePackageIssueInput {
    subject: String!
    content: String! @validMarkdown(maxLength: 50000)
}

"""
The package issue update input
"""
input UpdatePackageIssueInput {
    subject: String!
    content: String! @validMarkdown(maxLength: 50000)
}

"""
The package issue update input
"""
input UpdatePackageIssueStatusInput {
    status: PackageIssueStatus!
}

"""
The complete identifier for a package issue comment
"""
input PackageIssueCommentIdentifierInput {
    commentNumber: Int!
}

"""
The input to create a package issue comment
"""
input CreatePackageIssueCommentInput {
    content: String! @validMarkdown(maxLength: 50000)
}

"""
The input to update a package issue comment
"""
input UpdatePackageIssueCommentInput {
    content: String! @validMarkdown(maxLength: 50000)
}

"""
The complete identifier for a catalog assuming the registry is based on the HTTP request URL
"""
input CatalogIdentifierInput {
    catalogSlug: String! @validCatalogSlug
}

"""
The complete identifier for a collection assuming the registry is based on the HTTP request URL
"""
input CollectionIdentifierInput {
    collectionSlug: String! @validCollectionSlug
}

"""
The properties for creating a catalog
"""
input CreateCatalogInput {
    slug: String! @validCatalogSlug
    displayName: String!
    description: String
    website: String
    isPublic: Boolean!
    unclaimed: Boolean
}

"""
The properties of a catalog that can be updated. All are optional. Only the ones specified are applied.
"""
input UpdateCatalogInput {
    newSlug: String @validCatalogSlug
    displayName: String
    description: String
    website: String
    isPublic: Boolean
    unclaimed: Boolean
}

input SetUserCatalogPermissionInput {
    usernameOrEmailAddress: String! @validUsernameOrEmailAddress

    """
    The users permissions for the catalog itself
    """
    permission: [Permission!]!

    """
    The users permissions for all packages in the catalog
    """
    packagePermission: [Permission!]!
}

"""
The properties for creating a package list.
"""
input CreatePackageInput {
    packageSlug: String! @validPackageSlug
    catalogSlug: String! @validCatalogSlug
    displayName: String!
    description: String
}

"""
The properties for updating an existing package. All are optional. Only the ones specified are applied.
"""
input UpdatePackageInput {
    newCatalogSlug: String @validCatalogSlug
    newPackageSlug: String @validPackageSlug
    displayName: String
    description: String
    isPublic: Boolean
}

"""
The properties for updating a specific user's permissions on a package
"""
input SetPackagePermissionInput {
    usernameOrEmailAddress: String! @validUsernameOrEmailAddress
    permissions: [Permission!]!
}

"""
The properties for setting a specific user's permissions on a collection
"""
input SetUserCollectionPermissionsInput {
    usernameOrEmailAddress: String! @validUsernameOrEmailAddress
    permissions: [Permission!]!
}

"""
To create a new package version, submit a valid package file
"""
input CreateVersionInput {
    packageFile: PackageFileJSON
}

"""
For creating a new collection on the registry.
"""
input CreateCollectionInput {
    collectionSlug: String! @validCollectionSlug(allowNull: false)
    name: String!
    description: String
    isPublic: Boolean
}

"""
For updating an existing collection. All properties are optional, and only the ones specified are applied
"""
input UpdateCollectionInput {
    newCollectionSlug: String @validCollectionSlug(allowNull: true)
    name: String
    description: String
    isPublic: Boolean
}

"""
For sending a token response to recover and update users password
"""
input RecoverMyPasswordInput {
    token: String!
    newPassword: String! @validPassword
}
"""
For filtering Activity Logs by event type
"""
input ActivityLogFilterInput {
    eventType: [ActivityLogEventType]
    limit: Int!
    offset: Int!
}

"""
The follow identifier input
"""
input FollowIdentifierInput {
    catalog: CatalogIdentifierInput
    package: PackageIdentifierInput
    collection: CollectionIdentifierInput
    packageIssue: PackageIssueFullIdentifierInput
    user: UserIdentifierInput
}

"""
The save follow identifier input
"""
input SaveFollowInput {
    notificationFrequency: NotificationFrequency!
    catalog: CatalogIdentifierInput
    package: PackageIdentifierInput
    collection: CollectionIdentifierInput
    packageIssue: PackageIssueFullIdentifierInput
    user: UserIdentifierInput
}

"""
Platform settings type
"""
input PlatformSettingsInput {
    key: String!
    serializedSettings: String!
    isPublic: Boolean!
}

type Query {
    """
    Whether the specified username is available for sign up
    """
    usernameAvailable(username: String! @validUsername): Boolean!

    """
    Whether the specified email address is avialable for sign up
    """
    emailAddressAvailable(emailAddress: String! @validEmailAddress): Boolean!

    """
    Who am i
    """
    me: User! @isAuthenticated

    """
    A list of the requesting user's exisiting API key information
    """
    myAPIKeys: [APIKey!] @isAuthenticated

    """
    Returns all of the users for a given catalog
    """
    usersByPackage(
        identifier: PackageIdentifierInput! @hasPackagePermission(permission: MANAGE)
    ): [UserPackagePermissions]!

    """
    Returns all of the users for a given catalog
    """
    usersByCatalog(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: MANAGE)
    ): [UserCatalogPermissions]!

    """
    Returns all of the users for a given collection
    """
    usersByCollection(
        identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: MANAGE)
    ): [UserCollectionPermissions]!

    """
    Return a user by a given username, and returns only the properties on that user the requester should be able to view
    """
    user(username: String! @validUsername): User!

    """
    Returns package and collections with slugs that start with the given parameter
    """
    autoComplete(startsWith: String!): AutoCompleteResult!

    """
    For testing whether a given catalog slug is available to be reserved
    """
    catalogSlugAvailable(catalogSlug: String! @validCatalogSlug): Boolean!

    """
    Returns the catalogs the requesting user either owns or has edit or manage permission to
    """
    myCatalogs: [Catalog]! @isAuthenticated

    """
    Returns catalogs matching the query string (which can include boolean logic combinations) with pagination
    """
    searchCatalogs(query: String!, offSet: Int!, limit: Int!): SearchCatalogsResult!

    """
    Returns the catalog of the given identifier. Requires permission to view the catalog
    """
    catalog(identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: VIEW)): Catalog!

    """
    Returns the packages of the given identifier. Requires permission to view the catalog packages
    """
    catalogPackages(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: VIEW)
        offset: Int!
        limit: Int!
    ): [Package!]!

    """
    Returns the package for the given identifier. Requires permission to view the package
    """
    package(identifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)): Package!

    """
    Package versions diff
    """
    packageVersionsDiff(
        newVersion: VersionIdentifierInput! @hasPackagePermission(permission: VIEW)
        oldVersion: VersionIdentifierInput! @hasPackagePermission(permission: VIEW)
    ): PackageDifferences!

    """
    Package versions diffs
    """
    packageVersionsDiffs(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        offset: Int!
        limit: Int!
    ): [PackageDifferences!]

    """
    Package related collections
    """
    packageCollections(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        offset: Int!
        limit: Int!
    ): PackageCollectionsResult

    """
    Get package issue
    """
    packageIssue(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        packageIssueIdentifier: PackageIssueIdentifierInput!
    ): PackageIssue

    """
    Get package issues
    """
    packageIssues(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        includeOpenIssues: Boolean!
        includeClosedIssues: Boolean!
        offset: Int!
        limit: Int!
        orderBy: OrderBy!
    ): PackageIssuesResult

    """
    Get package issue comments
    """
    packageIssueComments(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issueIdentifier: PackageIssueIdentifierInput!
        offset: Int!
        limit: Int!
        orderBy: OrderBy!
    ): PackageIssueCommentsResult

    """
    Returns list of the requesting users packages
    """
    myPackages(offset: Int!, limit: Int!): PackagesResult! @isAuthenticated

    """
    Returns packages that match the given search query (which can contain boolean search logic). This request is paginated.
    """
    searchPackages(query: String!, offSet: Int!, limit: Int!): SearchPackagesResult!

    """
    Returns a list of packages the requesting user has recently viewed
    """
    myRecentlyViewedPackages(offSet: Int!, limit: Int!): ActivityLogResult! @isAuthenticated

    """
    Returns users that match the given search query
    """
    searchUsers(value: String!, limit: Int!, offSet: Int!): SearchUsersResult!

    """
    Returns users that match the given search query with no restrictions
    """
    adminSearchUsers(value: String!, limit: Int!, offSet: Int!): SearchUsersResult! @isAdmin

    """
    Returns the latest packages
    """
    latestPackages(offSet: Int!, limit: Int!): LatestPackagesResult!

    """
    Whether the specified colleciton slug is available
    """
    collectionSlugAvailable(collectionSlug: String! @validCollectionSlug): Boolean!

    """
    Returns the collection specified only if the user has permission to view it
    """
    collection(identifier: CollectionIdentifierInput!): Collection! @hasCollectionPermission(permission: VIEW)

    """
    Returns all of the collections the user has permission to view
    """
    collections: [Collection!]

    """
    Returns list of authenicated users collections
    """
    myCollections(offSet: Int!, limit: Int!): CollectionsResult! @isAuthenticated

    """
    Returns list of collections for the given user
    """
    userCollections(username: String! @validUsername, offSet: Int!, limit: Int!): CollectionsResult!

    """
    Returns list of catalogs for the given user
    """
    userCatalogs(username: String! @validUsername, offSet: Int!, limit: Int!): CatalogsResult!

    """
    Returns list of packages for the given user
    """
    userPackages(username: String! @validUsername, offSet: Int!, limit: Int!): PackagesResult!

    """
    Returns collections whose names match the given query. This request is paginated
    """
    searchCollections(query: String!, offset: Int!, limit: Int!): SearchCollectionResult!

    """
    Returns the latest collections. This request is paginated
    """
    latestCollections(offset: Int!, limit: Int!): CollectionsResult!

    """
    Returns a list of collections the requesting user has recently viewed
    """
    myRecentlyViewedCollections(offset: Int!, limit: Int!): ActivityLogResult! @isAuthenticated

    """
    Returns collections equal to collectionSlug, gives all packages associated with collectionSlug
    """
    collectionPackages(
        identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: VIEW)
        offset: Int!
        limit: Int!
    ): [Package!]!

    """
    Returns activity for the requesting user
    """
    myActivity(filter: ActivityLogFilterInput!): ActivityLogResult! @isAuthenticated

    """
    Activity for a given collection
    """
    collectionActivities(
        identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: MANAGE)
        filter: ActivityLogFilterInput!
    ): ActivityLogResult! @isAuthenticated

    """
    Activity for a given package
    """
    packageActivities(
        identifier: PackageIdentifierInput! @hasPackagePermission(permission: MANAGE)
        filter: ActivityLogFilterInput!
    ): ActivityLogResult! @isAuthenticated

    """
    Activity for a given catalog
    """
    catalogActivities(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: MANAGE)
        filter: ActivityLogFilterInput!
    ): ActivityLogResult! @isAuthenticated

    """
    Follow object for a target entity
    """
    getFollow(follow: FollowIdentifierInput!): Follow

    """
    For validating that the server is up, and requesting it's status
    """
    registryStatus: RegistryStatus

    """
    Get authenticated user's follows
    """
    myFollows(type: FollowType!, offset: Int!, limit: Int!): MyFollowsResult!

    """
    Get platform settings
    """
    platformSettings: [PlatformSettings!] @isAdmin

    """
    Get platform settings
    """
    publicPlatformSettingsByKey(key: String!): PlatformSettings!
}

type Mutation {
    """
    Creates a new user with the given input. Returns the user's authorization token.
    """
    createMe(value: CreateUserInput!): Void

    """
    Updates the requesting user's information. All fields optional.
    """
    updateMe(value: UpdateUserInput!): User! @isAuthenticated

    """
    Updates the user's admin status.
    """
    setAsAdmin(username: String! @validUsernameOrEmailAddress, isAdmin: Boolean!): Void @isAdmin

    """
    Updates the user's status and sends a notification email to them
    """
    adminSetUserStatus(username: String! @validUsername, status: UserStatus!, message: String): Void @isAdmin

    """
    Updates the logged in users' password
    """
    updateMyPassword(value: UpdateMyPasswordInput!): Void @isAuthenticated

    """
    Sends email to user if password is forgotten
    """
    forgotMyPassword(emailAddress: String! @validEmailAddress): Void

    """
    Sends email to user to update their password with token
    """
    recoverMyPassword(value: RecoverMyPasswordInput!): Void

    """
    Updates the avatar image of the authenticated user
    """
    setMyCoverImage(image: Base64ImageUpload! @validBase64Image): Void @isAuthenticated

    """
    Updates the avatar image of the authenticated user
    """
    setMyAvatarImage(image: Base64ImageUpload! @validBase64Image): Void @isAuthenticated

    """
    Deletes the requesting user's account
    """
    deleteMe: Void @isAuthenticated

    """
    Deletes a user's account
    """
    adminDeleteUser(usernameOrEmailAddress: String! @validUsernameOrEmailAddress): Void @isAdmin

    """
    Using a username or email address and a password, requests authentication information for the given user
    """
    login(username: String! @validUsernameOrEmailAddress, password: String! @validPassword): String!

    """
    Destroys the current user's session.
    """
    logout: Void @isAuthenticated

    """
    Generates a new API Key for the requesting user
    """
    createAPIKey(value: CreateAPIKeyInput!): APIKeyWithSecret! @isAuthenticated

    """
    Deletes an existing API Key for the requesting user
    """
    deleteAPIKey(id: String! @hasAPIKeyManagementPermission): APIKey! @isAuthenticated

    """
    Creates a new catalog which is owned by the requesting user
    """
    createCatalog(value: CreateCatalogInput!): Catalog!

    """
    Updates an existing catalog.
    """
    updateCatalog(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: EDIT)
        value: UpdateCatalogInput!
    ): Catalog!

    """
    Updates the cover image of the catalog
    """
    setCatalogAvatarImage(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: EDIT)
        image: Base64ImageUpload! @validBase64Image
    ): Void @isAuthenticated

    """
    Updates the cover image of the catalog
    """
    deleteCatalogAvatarImage(identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: EDIT)): Void
        @isAuthenticated

    """
    Updates the cover image of the catalog
    """
    setCatalogCoverImage(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: EDIT)
        image: Base64ImageUpload! @validBase64Image
    ): Void @isAuthenticated

    """
    Updates the catalog permissions of a user
    """
    setUserCatalogPermission(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: MANAGE)
        value: [SetUserCatalogPermissionInput!]!
        message: String!
    ): Void

    """
    Deletes and existing catalog. All packages in the catalog are then deleted
    """
    deleteCatalog(identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: MANAGE)): Void

    """
    Creates a new package based on the information provided, and gives the requesting user all permissions to the package
    """
    createPackage(value: CreatePackageInput!): Package! @hasCatalogPermission(permission: EDIT)

    """
    Updates an existing package's descriptive information. See createVersion for how to update the package data definitions
    """
    updatePackage(
        identifier: PackageIdentifierInput! @hasPackagePermission(permission: EDIT)
        value: UpdatePackageInput!
    ): Package!

    """
    Updates the cover image of the package
    """
    setPackageCoverImage(
        identifier: PackageIdentifierInput! @hasPackagePermission(permission: EDIT)
        image: Base64ImageUpload! @validBase64Image
    ): Void @isAuthenticated

    """
    Deletes an existing package
    """
    deletePackage(identifier: PackageIdentifierInput! @hasPackagePermission(permission: MANAGE)): Void

    """
    Called by a client to indicate a package has been fetched
    """
    packageFetched(identifier: VersionIdentifierInput! @hasPackagePermission(permission: VIEW)): Void

    """
    Creates a package issue
    """
    createPackageIssue(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issue: CreatePackageIssueInput!
    ): PackageIssue

    """
    Updates a package issue
    """
    updatePackageIssue(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issueIdentifier: PackageIssueIdentifierInput!
        issue: UpdatePackageIssueInput!
    ): PackageIssue

    """
    Updates a package issue's status
    """
    updatePackageIssueStatus(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issueIdentifier: PackageIssueIdentifierInput!
        status: UpdatePackageIssueStatusInput!
    ): PackageIssue

    """
    Updates selected package issues' statuses
    """
    updatePackageIssuesStatuses(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issuesIdentifiers: [PackageIssueIdentifierInput!]!
        status: UpdatePackageIssueStatusInput!
    ): Void

    """
    Updates selected package issues' statuses
    """
    deletePackageIssues(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issuesIdentifiers: [PackageIssueIdentifierInput!]!
    ): Void

    """
    Delete a package issue
    """
    deletePackageIssue(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        packageIssueIdentifier: PackageIssueIdentifierInput!
    ): Void

    """
    Creates a package issue comment
    """
    createPackageIssueComment(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issueIdentifier: PackageIssueIdentifierInput!
        comment: CreatePackageIssueCommentInput!
    ): PackageIssueComment

    """
    Creates a package issue comment
    """
    updatePackageIssueComment(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issueIdentifier: PackageIssueIdentifierInput!
        issueCommentIdentifier: PackageIssueCommentIdentifierInput!
        comment: UpdatePackageIssueCommentInput!
    ): PackageIssueComment

    """
    Deletes a package issue
    """
    deletePackageIssueComment(
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
        issueIdentifier: PackageIssueIdentifierInput!
        issueCommentIdentifier: PackageIssueCommentIdentifierInput!
    ): Void

    """
    Creates a new collection, which is managed by the requesting user
    """
    createCollection(value: CreateCollectionInput!): Collection!

    """
    Updates an existing collection
    """
    updateCollection(
        identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: EDIT)
        value: UpdateCollectionInput!
    ): Collection!

    """
    Updates the cover image of the collection
    """
    setCollectionCoverImage(
        identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: EDIT)
        image: Base64ImageUpload! @validBase64Image
    ): Void @isAuthenticated

    """
    Deletes an existing collection.
    """
    deleteCollection(identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: MANAGE)): Void

    """
    Includes an existing package in an existing collection
    """
    addPackageToCollection(
        collectionIdentifier: CollectionIdentifierInput! @hasCollectionPermission(permission: EDIT)
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
    ): CollectionPackage!

    """
    Removes an existing package from a collection
    """
    removePackageFromCollection(
        collectionIdentifier: CollectionIdentifierInput! @hasCollectionPermission(permission: EDIT)
        packageIdentifier: PackageIdentifierInput! @hasPackagePermission(permission: VIEW)
    ): Void

    """
    Sets the permissions for a given user collection
    """
    setUserCollectionPermissions(
        identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: MANAGE)
        value: [SetUserCollectionPermissionsInput!]!
        message: String!
    ): Void

    """
    Removes all permissions for a user on a given collection. Requires the manage collection permission
    """
    deleteUserCollectionPermissions(
        identifier: CollectionIdentifierInput! @hasCollectionPermission(permission: MANAGE)
        usernameOrEmailAddress: String! @validUsernameOrEmailAddress
    ): Void

    """
    Removes all permissions for a user on a given catalog. Requires the manage catalog permission
    """
    deleteUserCatalogPermissions(
        identifier: CatalogIdentifierInput! @hasCatalogPermission(permission: MANAGE)
        usernameOrEmailAddress: String! @validUsernameOrEmailAddress
    ): Void

    """
    Sets the permissions for a given set of users
    """
    setPackagePermissions(
        identifier: PackageIdentifierInput! @hasPackagePermission(permission: MANAGE)
        value: [SetPackagePermissionInput!]!
        message: String!
    ): Void

    """
    Removes all permissions for a user on a given package. Requires the manage package permission
    """
    removePackagePermissions(
        identifier: PackageIdentifierInput! @hasPackagePermission(permission: MANAGE)
        usernameOrEmailAddress: String! @validUsernameOrEmailAddress
    ): Void

    """
    Creates a new version of the package file on a package listing. There is no update, as any update should also be published as a new version
    """
    createVersion(
        identifier: PackageIdentifierInput! @hasPackagePermission(permission: EDIT)
        value: CreateVersionInput!
    ): Version!

    """
    Deletes a given version from a package. Use this sparingly, to allow for a viewable history of change for the package
    """
    deleteVersion(identifier: VersionIdentifierInput! @hasPackagePermission(permission: EDIT)): Void

    """
    For proxying user activity tracking outside of other API requests
    """
    track(actions: JSON!): Int!

    """
    Given a token, validate a user's email address
    """
    verifyEmailAddress(token: String!): Void

    """
    Accept invite emails to finish creating user
    """
    acceptInvite(token: String!, username: String! @validUsername, password: String! @validPassword): Void

    """
    Follow changes for a catalog, package, collection, issue or user.
    """
    saveFollow(follow: SaveFollowInput!): Void

    """
    Delete a follow
    """
    deleteFollow(follow: FollowIdentifierInput!): Void

    """
    Delete all authenticated user's follows
    """
    deleteAllMyFollows: Void @isAuthenticated

    """
    Create or update platform settings
    """
    savePlatformSettings(settings: PlatformSettingsInput!): PlatformSettings! @isAdmin
}
