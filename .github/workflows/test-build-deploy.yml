name: "Test, Build, Deploy"

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master
env:
    BUILD_NUMBER: ${{ github.run_number }}

jobs:
    lint:
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        timeout-minutes: 3
        name: Lint Source Code
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Root Dependencies
              run: npm ci

            - name: Run ESLint
              run: npm run lint

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1

            - name: Terraform Format
              run: terraform fmt -check

    testLib:
        name: "Test Lib"
        needs: lint
        timeout-minutes: 10
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Lib Dependencies
              run: npm ci
              working-directory: lib

            - name: Test Lib
              run: npm run test
              working-directory: lib

            - name: Build Lib
              run: npm run build
              working-directory: lib

            - name: Install Client Lib Dependencies
              run: npm ci
              working-directory: client-lib

            - name: Test Client Lib
              run: npm run test
              working-directory: client-lib

            - name: Build Client Lib
              id: build-client-lib-Dependencies
              run: npm run build
              working-directory: client-lib

    testBackend:
        name: "Test Backend"
        needs: lint
        timeout-minutes: 10
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Lib Dependencies
              id: install-lib-dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-dependencies
              run: npm run build
              working-directory: lib

            - name: Install Client Lib Dependencies
              id: install-client-lib-dependencies
              run: npm ci
              working-directory: client-lib

            - name: Cache Backend Node_modules
              id: cache-backend-node-modules
              uses: actions/cache@v1
              with:
                  path: backend/node_modules
                  key: datampm-registry-${{ runner.OS }}-backend-${{ hashFiles('backend/package.json', 'backend/package-lock.json') }}

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              if: steps.cache-backend-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: backend

            - name: Test Backend
              id: test-backend-Dependencies
              run: npm run test
              working-directory: backend

    testFrontend:
        name: "Test Frontend"
        needs: lint
        timeout-minutes: 10
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Lib Dependencies
              id: install-lib-dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              run: npm run build
              working-directory: lib

            - name: Cache Frontend Node_modules
              id: cache-frontend-node-modules
              uses: actions/cache@v1
              with:
                  path: frontend/node_modules
                  key: datampm-registry-${{ runner.OS }}-frontend-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}

            - name: Install Frontend Dependencies
              id: install-fronend-dependencies
              if: steps.cache-frontend-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: frontend

            - name: Test Frontend
              id: test-frontend-Dependencies
              run: npm run test:ci
              working-directory: frontend

    build-client-linux-intel64:
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        timeout-minutes: 25
        needs:
            - lint
        name: Build Linux Intel 64-bit Client
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

              # This debootstrap package is related to installing debian, and the correct version is missing as of 4/29/2022
              # This command instructs apt-get to not install the package as a depedency in the build tools below
              # - name: Do not allow debootstrap to be installed
              # run: apt-mark hold debootstrap

            - name: Install Build Tools
              run: sudo apt-get install g++ gcc make jq git-buildpackage libsecret-1-0 rpm rpmlint

            - name: Install Lib Dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              run: npm run build
              working-directory: lib

            - name: Install Client Lib Dependencies
              run: npm ci
              working-directory: client-lib

            - name: Install client dependencies
              run: npm ci
              working-directory: client

            - name: Run build
              run: npm run build
              working-directory: client

            - name: Build Linux Intel64 executables
              run: npm run package:linux:intel64
              working-directory: client

            - name: Install Backend Dependencies
              run: npm ci
              working-directory: backend

            - name: Run Client Tests
              run: npm run test
              working-directory: client
              env:
                  DATAPM_CLIENT_TEST_COMMAND: pkg-linux-intel64/datapm
                  CREDENTIALS_SECRET_KEY: test-key-not-for-production

            - name: Build Debian Intel64 Package
              run: ./create-debian-package.sh
              working-directory: client/installers/debian

            - name: Build Redhat Intel64 Package
              run: ./create-redhat-package.sh
              working-directory: client/installers/redhat

            - name: "Save Redhat Intell64 Package"
              uses: actions/upload-artifact@v2
              with:
                  name: client-redhat
                  path: client/installers/redhat/build/RPMS/x86_64/datapm-*.rpm
                  retention-days: 1

            - name: "Save Debian Intell64 Package"
              uses: actions/upload-artifact@v2
              with:
                  name: client-debian
                  path: client/installers/debian/datapm-*.deb
                  retention-days: 1

    build-client-windows-intel64:
        runs-on: windows-latest
        # TODO Would be best if this runs on all pull requests, except forks
        # but there is apparently no way to identify that a pull request is from
        # a fork (or wasn't obvious)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        timeout-minutes: 15
        needs:
            - testLib
            - testBackend
            - testFrontend
            - build-client-linux-intel64
        name: Build Windows Intel 64-Bit Client
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

            - name: Presinstall node-gyp cache
              run: npx node-gyp install 16.14.2

            - name: Install Lib dependencies
              working-directory: lib
              run: npm ci

            - name: Build Lib
              working-directory: lib
              run: npm run build

            - name: Install Client Lib Dependencies
              run: npm ci
              working-directory: client-lib

            - name: Install client dependencies
              working-directory: client
              run: npm ci

            - name: Build Client
              working-directory: client
              run: npm run build

            - name: Build Windows Executables
              run: npm run package:windows:intel64
              working-directory: client
              env:
                  WINDOWS_CLIENT_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_BASE64 }}
                  WINDOWS_CLIENT_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_PASSWORD }}

            - run: npm run package:windows:bundle
              working-directory: client
              env:
                  WINDOWS_CLIENT_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_BASE64 }}
                  WINDOWS_CLIENT_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_PASSWORD }}

            - name: "Save Windows Executable"
              uses: actions/upload-artifact@v2
              with:
                  name: client-windows
                  path: client/installers/windows/dist/datapm-*.msixbundle
                  retention-days: 5

    build-client-macos-intel64:
        runs-on: macos-latest
        # TODO same as windows build above
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        timeout-minutes: 25
        needs:
            - testLib
            - testBackend
            - testFrontend
            - build-client-linux-intel64
        name: Build MacOS Intel 64-Bit Client
        steps:
            - uses: actions/checkout@v2

            - name: get-npm-version
              id: package-version
              run: echo ::set-output name=DATAPM_VERSION::`jq .version package.json  | tr -d '"'`

            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: "16.14.2"

            - name: Install Lib Dependencies
              run: npm ci
              working-directory: lib

            - name: Install Backend Dependencies
              run: npm ci
              working-directory: backend

            - name: Install Client Lib Dependencies
              run: npm ci
              working-directory: client-lib

            - name: Install client dependencies
              run: npm ci
              working-directory: client

            - name: Run build
              run: npm run build
              working-directory: client

            - name: Build MacOS Intel64 executables
              run: npm run package:macos:intel64
              working-directory: client

            - name: Codesign & Generate MacOS Installer
              env:
                  MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
                  MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
                  MACOS_INSTALLER_CERTIFICATE: ${{ secrets.MACOS_INSTALLER_CERTIFICATE }}
                  MACOS_INSTALLER_CERTIFICATE_PWD: ${{ secrets.MACOS_INSTALLER_CERTIFICATE_PWD }}
                  MACOS_KEYCHAIN_TEMPORARY_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_TEMPORARY_PASSWORD }}
                  APPLE_DEVELOPER_CERTIFICATE_ID: ${{secrets.APPLE_DEVELOPER_CERTIFICATE_ID}}
                  DATAPM_VERSION: ${{ steps.package-version.outputs.DATAPM_VERSION}}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
              run: ./installers/macos/sign-apps.sh
              working-directory: client

            - name: "Create MacOS Installer Artifact"
              uses: actions/upload-artifact@v2
              with:
                  name: client-macos
                  path: ./client/installers/macos/macOS-x64/target/pkg-signed/*.pkg
                  retention-days: 7

    buildAndDeploy:
        name: "Build And Deploy"
        timeout-minutes: 20
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        needs:
            - build-client-windows-intel64
            - build-client-macos-intel64
        env:
            INPUT_TOKEN: "" # See https://github.com/JS-DevTools/npm-publish/issues/15
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Dependencies
              run: npm ci

            - name: Install Lib Dependencies
              id: install-lib-Dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-Dependencies
              run: npm run build
              working-directory: lib

            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: ./lib/dist/package.json
                  token: ${{ secrets.NPM_TOKEN }}

            - name: Install Client Lib Dependencies
              run: npm ci
              working-directory: client-lib

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              run: npm ci
              working-directory: backend

            - name: Build Backend
              id: build-backend-Dependencies
              run: npm run build
              working-directory: backend

            - name: Install Frontend Dependencies
              id: install-frontend-dependencies
              run: npm ci
              working-directory: frontend

            - name: Build Frontend
              id: build-frontend-Dependencies
              run: npm run build
              working-directory: frontend

            - name: Install Docs Dependencies
              id: install-docs-dependencies
              run: npm ci
              working-directory: docs/website

            - name: Build Docs
              id: build-docs-Dependencies
              run: npm run build
              working-directory: docs/website

            - name: Download Windows Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-windows
                  path: dist/client-installers

            - name: Download MacOS Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-macos
                  path: dist/client-installers

            - name: Download Debian Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-debian
                  path: dist/client-installers

            - name: Download Redhat Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-redhat
                  path: dist/client-installers

            - name: Build Registry Docker Container
              run: gulp buildRegistryDockerImage

            - name: Smoke Test Registry Docker Image
              run: npm run test

            - name: Echo Docker Password to file
              run: echo $${{secrets.DOCKER_PASSWORD}} > ~/docker-password

            - name: Authorize Docker
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Write Container Deployer Credentials file
              run: echo $CONTAINER_DEPLOYER_GOOGLE_CREDENTIALS > container-deployer-gcloud.key
              env:
                  CONTAINER_DEPLOYER_GOOGLE_CREDENTIALS: ${{secrets.CONTAINER_DEPLOYER_GOOGLE_CREDENTIALS}}

            - name: Authenticate to Google Cloud
              run: gcloud auth activate-service-account container-deployer@datapm-containers.iam.gserviceaccount.com --key-file=container-deployer-gcloud.key

            - name: Authorize Docker for GCR
              run: gcloud auth configure-docker --quiet

            - name: Deploy Assets
              run: npm run deploy
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: container-deployer-gcloud.key

            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: ./client/package.json
                  token: ${{ secrets.NPM_TOKEN }}

            - name: Cleanup Deployer Credentials File
              run: rm -f container-deployer-gcloud.key

    updateTestEnvironment:
        name: "Update Test Environment"
        timeout-minutes: 20
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        needs:
            - buildAndDeploy
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Write Container Deployer Credentials file
              run: echo $GOOGLE_CREDENTIALS > gcloud.key
              env:
                  GOOGLE_CREDENTIALS: ${{secrets.TEST_GOOGLE_CREDENTIALS}}

            - name: Authenticate to Google Cloud
              run: gcloud auth activate-service-account deployer@datapm-test-v4.iam.gserviceaccount.com --key-file=gcloud.key

            - name: Terraform Init to
              run: terraform init -backend-config='environments/test.config'
              working-directory: terraform
              env:
                  GOOGLE_CREDENTIALS: ${{secrets.TEST_GOOGLE_CREDENTIALS}}

            - name: Add GCR Revision
              run: gcloud run deploy datapm-registry-test --project datapm-test-v4 --image gcr.io/datapm-containers/datapm-registry --region us-central1 --platform managed
              env:
                  GOOGLE_CREDENTIALS: ${{secrets.TEST_GOOGLE_CREDENTIALS}}

            - name: Terraform Apply
              run: terraform apply -auto-approve  -var-file='environments/test.tfvars'
              working-directory: terraform
              env:
                  TF_VAR_smtp_password: ${{secrets.TF_VAR_SMTP_PASSWORD}}
                  GOOGLE_CREDENTIALS: ${{secrets.TEST_GOOGLE_CREDENTIALS}}

            - name: Update GCR Traffic
              run: gcloud run services update-traffic datapm-registry-test --project datapm-test-v4 --region us-central1 --platform managed --to-latest
              env:
                  GOOGLE_CREDENTIALS: ${{secrets.TEST_GOOGLE_CREDENTIALS}}

            #            - name: Install dependencies
            #              run: npm ci

            #            - name: Publish Apollo Graphql Update
            #              run: npx apollo service:push --graph=datapm --key=${{secrets.APOLLO_KEY}} --variant=test --localSchemaFile=backend/dist/schema.gql,backend/dist/auth-schema.gql,backend/dist/user-schema.gql,backend/dist/api-key-schema.gql,backend/dist/images-schema.gql
            #              env:
            #                  INPUT_TOKEN: ${{ secrets.NPM_TOKEN }}
            #                  APOLLO_KEY: ${{secrets.APOLLO_KEY}}

            - name: Cleanup Deployer Credentials File
              run: rm -f gcloud.key

    github-release-clients:
        runs-on: ubuntu-latest
        name: "Client Releases on GitHub"
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        needs:
            - build-client-macos-intel64
            - build-client-windows-intel64
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Download Windows Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-windows
                  path: dist/client-installers

            - name: Download MacOS Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-macos
                  path: dist/client-installers

            - name: Download Debian Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-debian
                  path: dist/client-installers

            - name: Download Redhat Installer
              uses: actions/download-artifact@v2
              with:
                  name: client-redhat
                  path: dist/client-installers

            - name: Find DataPM Version
              id: datapm-version
              run: echo ::set-output name=DATAPM_VERSION::`jq .version package.json  | tr -d '"'`

            - name: setup git config
              run: git config user.name "$${{env.GITHUB_ACTOR}}" && git config user.email "gitHubActionDeployer@no-reply"

            - name: Tag
              run: git tag -a $DATAPM_VERSION -m "Release $DATAPM_VERSION" && git push origin $DATAPM_VERSION
              env:
                  DATAPM_VERSION: ${{ steps.datapm-version.outputs.DATAPM_VERSION}}

            - name: Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.datapm-version.outputs.DATAPM_VERSION}}
                  files: |
                      dist/client-installers/*.msixbundle
                      dist/client-installers/*.pkg
                      dist/client-installers/*.deb
                      dist/client-installers/*.rpm

    bumpVersion:
        name: "Bump Package Versions"
        timeout-minutes: 5
        runs-on: ubuntu-latest
        container: ubuntu:20.04
        needs:
            - buildAndDeploy
            - github-release-clients
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.14.2"

            - name: Install Dependencies
              run: npm ci

            - name: Generate Changelog for prior version
              run: npx generate-changelog

            - name: Set Git Author
              run: git config user.name "$${{env.GITHUB_ACTOR}}" && git config user.email "gitHubActionDeployer@no-reply"

            - name: Bump Version
              run: npm run bump-version

            - name: Git Commit
              run: npm run git-commit-push
