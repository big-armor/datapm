name: "Build & Deploy"

on:
    push:
        branches:
            - master

jobs:
    buildAndDeploy:
        name: "Build And Deploy"
        timeout-minutes: 20
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "12"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Cache Root Node_modules
              id: cache-root-node-modules
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: datampm-registry-${{ runner.OS }}-root-${{ hashFiles('package.json', 'package-lock.json') }}

            - name: Install Dependencies
              if: steps.cache-root-node-modules.outputs.cache-hit != 'true'
              run: npm ci

            - name: Run ESLint
              run: npm run lint

            - name: Run Prettier linter
              uses: wearerequired/lint-action@v1.6.0
              with:
                  github_token: ${{ secrets.github_token }}
                  prettier: true

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1

            - name: Terraform Format
              run: terraform fmt -check

            - name: Set Git Author
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: git config user.name "$${{env.GITHUB_ACTOR}}" && git config user.email "gitHubActionDeployer@no-reply"

            - name: Bump Version
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: npm run bump-version

            - name: Cache Lib Dist
              id: cache-lib-all-files
              uses: actions/cache@v1
              with:
                  path: lib/dist
                  key: datampm-registry-${{ runner.OS }}-lib-dist-${{ hashFiles('lib/**') }}

            - name: Cache Lib Node_modules
              if: steps.cache-lib-all-files.outputs.cache-hit != 'true'
              id: cache-lib-node-modules
              uses: actions/cache@v1
              with:
                  path: lib/node_modules
                  key: datampm-registry-${{ runner.OS }}-lib-node-modules-${{ hashFiles('lib/package.json', 'lib/package-lock.json') }}

            - name: Install Lib Dependencies
              id: install-lib-Dependencies
              if: steps.cache-lib-all-files.outputs.cache-hit != 'true' || steps.cache-lib-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-Dependencies
              if: steps.cache-lib-all-files.outputs.cache-hit != 'true'
              run: npm run build
              working-directory: lib

            - name: Cache Backend Dist
              id: cache-backend-all-files
              uses: actions/cache@v1
              with:
                  path: backend/dist
                  key: datampm-registry-${{ runner.OS }}-backend-dist-${{ hashFiles('backend/**', 'lib/**') }}

            - name: Cache Backend Node_modules
              id: cache-backend-node-modules
              if: steps.cache-backend-all-files.outputs.cache-hit != 'true'
              uses: actions/cache@v1
              with:
                  path: backend/node_modules
                  key: datampm-registry-${{ runner.OS }}-backend-node-modules-${{ hashFiles('backend/package.json', 'backend/package-lock.json') }}

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              if: steps.cache-backend-all-files.outputs.cache-hit != 'true' || steps.cache-backend-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: backend

            - name: Build Backend
              id: build-backend-Dependencies
              if: steps.cache-backend-all-files.outputs.cache-hit != 'true'
              run: npm run build
              working-directory: backend

            - name: Cache Frontend Dist
              id: cache-frontend-all-files
              uses: actions/cache@v1
              with:
                  path: frontend/dist
                  key: datampm-registry-${{ runner.OS }}-frontend-dist-${{ hashFiles('frontend/**', 'lib/**') }}

            - name: Cache Frontend Node_modules
              id: cache-frontend-node-modules
              if: steps.cache-frontend-all-files.outputs.cache-hit != 'true'
              uses: actions/cache@v1
              with:
                  path: frontend/node_modules
                  key: datampm-registry-${{ runner.OS }}-frontend-node-modules-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}

            - name: Install Frontend Dependencies
              id: install-fronend-dependencies
              if: steps.cache-frontend-all-files.outputs.cache-hit != 'true' || steps.cache-frontend-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: frontend

            - name: Build Frontend
              id: build-frontend-Dependencies
              if: steps.cache-frontend-all-files.outputs.cache-hit != 'true'
              run: npm run build
              working-directory: frontend

            - name: Cache Docs Node_modules
              id: cache-docs-node-modules
              uses: actions/cache@v1
              with:
                  path: docs/website/node_modules
                  key: datampm-registry-${{ runner.OS }}-docs-${{ hashFiles('docs/website/package.json', 'docs/website/package-lock.json') }}

            - name: Install Docs Dependencies
              id: install-docs-dependencies
              if: steps.cache-docs-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: docs/website

            - name: Build Docs
              id: build-docs-Dependencies
              run: npm run build
              working-directory: docs/website

            - name: Build Docker Container
              run: gulp buildDockerImage

            - name: Smoke Test Docker Image
              run: npm run test

            - name: Tag
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: npm run tag

            - name: Echo Docker Password to file
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: echo $${{secrets.DOCKER_PASSWORD}} > ~/docker-password

            - name: Authorize Docker
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Write Credentials file
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: echo $GOOGLE_CREDENTIALS > gcloud.key
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Authenticate to Google Cloud
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: gcloud auth activate-service-account deployment@datapm-test-terraform.iam.gserviceaccount.com --key-file=gcloud.key

            - name: Authorize Docker for GCR
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: gcloud auth configure-docker --quiet

            - name: Deploy Assets
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: npm run deploy
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ~/gcloud.key

            - uses: JS-DevTools/npm-publish@v1
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              with:
                  package: ./lib/dist/package.json
                  token: ${{ secrets.NPM_TOKEN }}

            - name: Terraform Init to
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: terraform init
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: gcloud.key

            - name: Terraform Plan
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: terraform plan
              env:
                  TF_VAR_APOLLO_KEY: ${{secrets.TF_VAR_APOLLO_KEY}}
                  TF_VAR_smtp_password: ${{secrets.TF_VAR_SMTP_PASSWORD}}
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Terraform Apply
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: terraform apply -auto-approve
              env:
                  TF_VAR_APOLLO_KEY: ${{secrets.TF_VAR_APOLLO_KEY}}
                  TF_VAR_smtp_password: ${{secrets.TF_VAR_SMTP_PASSWORD}}
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Add GCR Revision
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: gcloud run deploy datapm-registry --project datapm-test-terraform --image gcr.io/datapm-test-terraform/datapm-registry --region us-central1 --platform managed
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Update GCR Traffic
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: gcloud run services update-traffic datapm-registry --project datapm-test-terraform --region us-central1 --platform managed --to-latest
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Publish Apollo Graphql Update
              if: github.ref == 'refs/heads/master' && github.event_name == 'push'
              run: npx apollo service:push --graph=datapm --key=${{secrets.TF_VAR_APOLLO_KEY}} --variant=test --localSchemaFile=backend/dist/schema.gql,backend/dist/auth-schema.gql,backend/dist/user-schema.gql,backend/dist/api-key-schema.gql,backend/dist/images-schema.gql
              env:
                  INPUT_TOKEN: ${{ secrets.NPM_TOKEN }}
