name: "Build & Deploy"

on:
    push:
        branches:
            - master

jobs:
    buildAndDeploy:
        name: "Build And Deploy"
        timeout-minutes: 20
        runs-on: ubuntu-latest
        env:
            INPUT_TOKEN: "" # See https://github.com/JS-DevTools/npm-publish/issues/15
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "14.18.3"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Dependencies
              run: npm ci

            - name: Run ESLint
              run: npm run lint

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1

            - name: Terraform Format
              run: terraform fmt -check

            - name: Set Git Author
              run: git config user.name "$${{env.GITHUB_ACTOR}}" && git config user.email "gitHubActionDeployer@no-reply"

            - name: Bump Version
              run: npm run bump-version

            - name: Install Lib Dependencies
              id: install-lib-Dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-Dependencies
              run: npm run build
              working-directory: lib

            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: ./lib/dist/package.json
                  token: ${{ secrets.NPM_TOKEN }}

            - name: Bump Package Files Lib Versions
              run: npm run bump-package-lib-versions

            - name: Tag
              run: npm run tag

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              run: npm ci
              working-directory: backend

            - name: Build Backend
              id: build-backend-Dependencies
              run: npm run build
              working-directory: backend

            - name: Install Frontend Dependencies
              id: install-frontend-dependencies
              run: npm ci
              working-directory: frontend

            - name: Build Frontend
              id: build-frontend-Dependencies
              run: npm run build
              working-directory: frontend

            - name: Install Docs Dependencies
              id: install-docs-dependencies
              run: npm ci
              working-directory: docs/website

            - name: Build Docs
              id: build-docs-Dependencies
              run: npm run build
              working-directory: docs/website

            - name: Install Client Dependencies
              id: install-client-dependencies
              run: npm ci
              working-directory: client

            - name: Build Client
              id: build-client-Dependencies
              run: npm run build
              working-directory: client

            - name: Build Registry Docker Container
              run: gulp buildRegistryDockerImage

            - name: Smoke Test Registry Docker Image
              run: npm run test

            - name: Echo Docker Password to file
              run: echo $${{secrets.DOCKER_PASSWORD}} > ~/docker-password

            - name: Authorize Docker
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Write Credentials file
              run: echo $GOOGLE_CREDENTIALS > gcloud.key
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Authenticate to Google Cloud
              run: gcloud auth activate-service-account deployment@datapm-test-terraform.iam.gserviceaccount.com --key-file=gcloud.key

            - name: Authorize Docker for GCR
              run: gcloud auth configure-docker --quiet

            - name: Deploy Assets
              run: npm run deploy
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ~/gcloud.key

            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: ./client/package.json
                  token: ${{ secrets.NPM_TOKEN }}

            - name: Terraform Init to
              run: terraform init
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: gcloud.key

            - name: Terraform Plan
              run: terraform plan
              env:
                  TF_VAR_APOLLO_KEY: ${{secrets.TF_VAR_APOLLO_KEY}}
                  TF_VAR_smtp_password: ${{secrets.TF_VAR_SMTP_PASSWORD}}
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Add GCR Revision
              run: gcloud run deploy datapm-registry --project datapm-test-terraform --image gcr.io/datapm-test-terraform/datapm-registry --region us-central1 --platform managed
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Terraform Apply
              run: terraform apply -auto-approve
              env:
                  TF_VAR_APOLLO_KEY: ${{secrets.TF_VAR_APOLLO_KEY}}
                  TF_VAR_smtp_password: ${{secrets.TF_VAR_SMTP_PASSWORD}}
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Update GCR Traffic
              run: gcloud run services update-traffic datapm-registry --project datapm-test-terraform --region us-central1 --platform managed --to-latest
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Publish Apollo Graphql Update
              run: npx apollo service:push --graph=datapm --key=${{secrets.TF_VAR_APOLLO_KEY}} --variant=test --localSchemaFile=backend/dist/schema.gql,backend/dist/auth-schema.gql,backend/dist/user-schema.gql,backend/dist/api-key-schema.gql,backend/dist/images-schema.gql
              env:
                  INPUT_TOKEN: ${{ secrets.NPM_TOKEN }}
